<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;
/**
 * CatalogItemOptionValueForItemVariation Class Doc Comment
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://squareup.com/developers
 */
class CatalogItemOptionValueForItemVariation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'item_option_id' => 'string',
        'item_option_value_id' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'item_option_id' => 'item_option_id',
        'item_option_value_id' => 'item_option_value_id'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'item_option_id' => 'setItemOptionId',
        'item_option_value_id' => 'setItemOptionValueId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'item_option_id' => 'getItemOptionId',
        'item_option_value_id' => 'getItemOptionValueId'
    );
  
    /**
      * $item_option_id The unique id of an item option.
      * @var string
      */
    protected $item_option_id;
    /**
      * $item_option_value_id The unique id of the selected value for the item option.
      * @var string
      */
    protected $item_option_value_id;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initializing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            if (isset($data["item_option_id"])) {
              $this->item_option_id = $data["item_option_id"];
            } else {
              $this->item_option_id = null;
            }
            if (isset($data["item_option_value_id"])) {
              $this->item_option_value_id = $data["item_option_value_id"];
            } else {
              $this->item_option_value_id = null;
            }
        }
    }
    /**
     * Gets item_option_id
     * @return string
     */
    public function getItemOptionId()
    {
        return $this->item_option_id;
    }
  
    /**
     * Sets item_option_id
     * @param string $item_option_id The unique id of an item option.
     * @return $this
     */
    public function setItemOptionId($item_option_id)
    {
        $this->item_option_id = $item_option_id;
        return $this;
    }
    /**
     * Gets item_option_value_id
     * @return string
     */
    public function getItemOptionValueId()
    {
        return $this->item_option_value_id;
    }
  
    /**
     * Sets item_option_value_id
     * @param string $item_option_value_id The unique id of the selected value for the item option.
     * @return $this
     */
    public function setItemOptionValueId($item_option_value_id)
    {
        $this->item_option_value_id = $item_option_value_id;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
